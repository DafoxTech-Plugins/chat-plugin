"use strict";var core=require("plugin-core"),notification=require("../store/notification"),default_per_page=20;exports.get=async(req,res,next)=>{try{var{dbi}=core,{page,q,per_page}=req.query,per_page=per_page||default_per_page,page=page||1,limit=parseInt(per_page),offset=(page-1)*limit,sequelize=dbi.Sequelize,{Op}=sequelize,search_q=q,where={};search_q&&(search_q=search_q.toLowerCase(),where[Op.or]=[sequelize.where(sequelize.fn("lower",sequelize.col("hostname")),{[Op.like]:`%${search_q}%`}),sequelize.where(sequelize.fn("lower",sequelize.col("mac_address")),{[Op.like]:`%${search_q}%`}),sequelize.where(sequelize.fn("lower",sequelize.col("ip_address")),{[Op.like]:`%${search_q}%`})],["connected","disconnected"].includes(search_q)&&where[Op.or].push({status:{[Op.eq]:search_q}}));var total_count=await dbi.models.MobileDevice.scope(["default_scope"]).count({where:where}),devices=(await dbi.models.MobileDevice.scope(["default_scope"]).findAll({distinct:!0,where:where,limit:limit,offset:offset,include:[{model:dbi.models.Chat,order:[["is_read_by_admin","ASC"]],limit:1,required:!1}],order:[["active","DESC"]]})).map(d=>((d=d.toJSON()).has_unread=0<d.Chats.filter(c=>!c.is_read_by_admin).length,d)).sort(d=>!d.has_unread);res.json({devices:devices,count:devices.length,total_count:total_count})}catch(e){next(e)}},exports.getDeviceData=async(req,res,next)=>{try{var{mobile_device_id}=req.params,is_muted=!!await core.dbi.models.MutedDevice.findOne({where:{mobile_device_id:mobile_device_id}}),device=await core.devices_manager.loadDevice(mobile_device_id);res.json(Object.assign(device.toJSON(),{is_muted:is_muted}))}catch(e){next(e)}},exports.muteDevice=async(req,res,next)=>{try{var{mobile_device_id}=req.params,device=await core.devices_manager.loadDevice(mobile_device_id);await core.dbi.models.MutedDevice.create({machine_id:core.machine_id,mobile_device_id:mobile_device_id,muted_at:new Date}),device.emit("chat:mute"),res.json({})}catch(e){next(e)}},exports.unmuteDevice=async(req,res,next)=>{try{var{mobile_device_id}=req.params,device=await core.devices_manager.loadDevice(mobile_device_id);await core.dbi.models.MutedDevice.destroy({where:{mobile_device_id:mobile_device_id}}),device.emit("chat:unmute"),res.json({})}catch(e){next(e)}},exports.getUnreadDeviceIds=async(req,res,next)=>{try{var mobile_device_ids=(await core.dbi.models.Chat.findAll({where:{is_read_by_admin:!1},distinct:!0,attributes:["mobile_device_id"]})).map(r=>r.mobile_device_id);res.json(mobile_device_ids)}catch(e){next(e)}},exports.getNotifications=async(req,res,next)=>{try{var{device}=req;await notification.subscribe(device);var[notif]=notification.get(device.db_instance.id)||[];res.json(notif||{})}catch(e){next(e)}};